--local Network = require "Network"
--local Event = require 'Event'
local protobuf = require "protobuf"
--local Network = require "Network"
---------------------------------------------------------------------------
--成员变量
---------------------------------------------------------------------------
Player = {}
local this = Player

local _player = nil --玩家数据
local _id = 0
local _rightId = 0
local _crossId = 0
local _leftId = 0
---------------------------------------------------------------------------
--获取玩家ID
---------------------------------------------------------------------------
function Player.GetID()
	return _player.common_prop.player_id
end

---------------------------------------------------------------------------
--加载场景!!!!!!!type_t，记得添加
---------------------------------------------------------------------------
function Player.LoadScene(type_t, buffer)
   CS.UnityEngine.Application.LoadLevelAsync("PlaySence")
end

---------------------------------------------------------------------------
--数据封装
---------------------------------------------------------------------------

function Player.CmdCreatePlayer()
    -- body
    local createPlayer = {}
    this.SendProtocol("CreatePlayer",createPlayer)
end


function Player.CmdLogin(name,passWord)
    -- body
    local login = {
        account = {
            username = name,--""
            password = passWord,--""
        }
    }
    this.SendProtocol("Login",login)
end

function Player.CmdEnterGame(id)
    -- body
    local enterGame = {
        player_id = id,
    }
    this.SendProtocol("EnterGame",enterGame)
end

function Player.CmdCreateRoom()
    -- body
    local createRoom ={
        --room = {
            --room_id = id,--1,
            --room_name = name,--"123",
            --enter_password  = passWord,--"123",
       -- }
    }
    this.SendProtocol("CreateRoom",createRoom)
end

function Player.CmdEnterRoom(id,passWord)
    -- body
    local enterRoom = {
        room_id = id,--2;
        enter_password = passWord,--"123";
    }
    this.SendProtocol("EnterRoom",enterRoom)
end

function Player.CmdGameOperation()
    -- body
    local gameOperation = {
       oper_type = "GAME_OPER_TYPE_START"
    }
    this.SendProtocol("GameOperation",gameOperation)
end


---------------------------------------------------------------------------
--进入场景
---------------------------------------------------------------------------
function Player.CmdEnterScene(scene_id)
    local enter_scene = P_Protocol.EnterScene()
    enter_scene.scene_id = scene_id
    ---------------------------------------------
    this.SendProtocol(enter_scene)
    CS.UnityEngine.Application.LoadLevel("PlaySence")
end
---------------------------------------------------------------------------
--发送协议
---------------------------------------------------------------------------
---[[
function Player.SendProtocol(messageName,message)
    Network.SendProtocol(messageName,message)
end
---------------------------------------------------------------------------
--进入游戏
---------------------------------------------------------------------------
--[[
function Player.CmdEnterGame(player_id)
    local enter_game = P_Protocol.EnterGame()
    enter_game.player_id = player_id
    -------------------------------------------
    this.SendProtocol(enter_game)
end
--]]
--]]

--[[
    协议处理：
    
    1.在Network中注册接收协议对应的响应函数；
    
    2.在本文件中实现响应函数；
--]]
---------------------------------------------
--------------type_t!!!!!!!!!!!!
---------------------------------------------
function Player.OnGameOperation(type_t,stuff)
    -- body
    local message = protobuf.decode("Adoter.Asset.GameOperation", stuff)

    if not message.source_player_id then
        --判断id是谁
    end
    print(this._id)
end

function Player.OnCreatePlayer(type_t,stuff)
    -- body
    local message = protobuf.decode("Adoter.Asset.CreatePlayer", stuff)

    this._id = message.player_id
    print(this._id)
end

function Player.OnCreateRoom(type_t,stuff)
    -- body
    local message = protobuf.decode("Adoter.Asset.CreateRoom", stuff)
    this._roomId = message.room.room_id
    print(this._roomId)
    --this._roomType = message.room.room_type
    Player.self:Attach(Player.LoadScene)
end

function Player.OnLoadSuccess()
    this.CmdEnterScene()
end

---------------------------------------------------------------------------
--通用操作返回协议，模拟RPC处理流程
---------------------------------------------------------------------------
function Player.OnCommonOperation(type_t,stuff)
	local message = protobuf.decode("Adoter.Asset.CommonOperationResponse", stuff)
    FLibEvent.Fire(message.client_type_t, message.client_message)
end
---------------------------------------------------------------------------
--周围物体、玩家移动
---------------------------------------------------------------------------
function Player.OnSurroundChanged(stuff)
    logWarn('OnSurroundChanged...');
    local surrouds = P_Protocol.SurroundingsChanged()
    surrouds:ParseFromString(stuff)
    
    local entity_id = surrouds.entity_id
    logWarn(entity_id)
end
---------------------------------------------------------------------------
return Player