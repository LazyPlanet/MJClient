local protobuf = require "protobuf"
local AssetManager = require "AssetManager"

---------------------------------------------------------------------------
--成员变量
---------------------------------------------------------------------------
Player = {}
local this = Player
local _player_data = nil --玩家登录数据
local _my_player_data = nil --房间内玩家数据
local _all_players_data = nil
local _id = nil
local _password = ""
local _roomId = nil
local _rightId = 0
local _crossId = 0
local _leftId = 0
local _invoke_data = ""
local _invoke_table = {}
local _invoke_table_test= {}
local _pai_operation_alert_cache = {} --玩家可进行操作的牌缓存
local _pais_operation_alert_cache = {} --玩家可进行操作的多张牌缓存
local _operation_alert_cache = {} --玩家可操作缓存
local _fa_pai_cache = {}
local _da_pai_cache = {}
_da_pai_cache.front = 1
_da_pai_cache.rear = 0
local _pai_operation_show_cache = {}
_pai_operation_show_cache.front = 1
_pai_operation_show_cache.rear = 0
local operationState = Enum.CreateEnumTable({"WAIT", "PENG", "GANG", "CHI", "HU", "DAPAI", "XUANFENGGANGFENG", "XUANFENGGANGJIAN", "ANGANG"},-1)

local _invokeFunctionTable = {}
_invokeFunctionTable.front = 1
_invokeFunctionTable.rear = 0

local _calculate_data = {}--结算数据

function Player.GetinvokeFunctionCache()
    -- body
    if _invokeFunctionTable.front > _invokeFunctionTable.rear then
        return nil
    else
        local tempData = _invokeFunctionTable[_invokeFunctionTable.front]
        _invokeFunctionTable.front = _invokeFunctionTable.front + 1
        return tempData
    end
end
function Player.SetinvokeFunctionCache(cacheData)
    -- body
    _invokeFunctionTable.rear = _invokeFunctionTable.rear + 1
    _invokeFunctionTable[_invokeFunctionTable.rear] = cacheData
end

function Player.GetDaPaiCache()
    -- body
    if _da_pai_cache.front > _da_pai_cache.rear then
        return nil
    else
        local tempData = _da_pai_cache[_da_pai_cache.front]
        _da_pai_cache.front = _da_pai_cache.front + 1
        return tempData
    end
end
function Player.SetDaPaiCache(cacheData)
    -- body
    _da_pai_cache.rear = _da_pai_cache.rear + 1
    _da_pai_cache[_da_pai_cache.rear] = cacheData
end

function Player.GetPaiOperationShowCache()
    -- body
    if _pai_operation_show_cache.front > _pai_operation_show_cache.rear then
        return nil
    else
        local tempData = _pai_operation_show_cache[_pai_operation_show_cache.front]
        _pai_operation_show_cache.front = _pai_operation_show_cache.front + 1
        return tempData
    end
end
function Player.SetPaiOperationShowCache(cacheData)
    -- body
    _pai_operation_show_cache.rear = _pai_operation_show_cache.rear + 1
    _pai_operation_show_cache[_pai_operation_show_cache.rear] = cacheData
end
---------------------------------------------------------------------------
--获取玩家ID
---------------------------------------------------------------------------

function Player.GetID()
	return _my_player_data.common_prop.player_id
end

---------------------------------------------------------------------------
--加载场景!!!!!!!type_t，记得添加
---------------------------------------------------------------------------
function Player.LoadScene(type_t, buffer)
    for k,v in pairs(ClickEvent._createObject) do
        v:Dispose()
    end
    Player.CmdLoadScene("LOAD_SCENE_TYPE_START",this._roomId)
    CS.UnityEngine.Application.LoadLevelAsync("PlaySence")
end

---------------------------------------------------------------------------
--数据封装
---------------------------------------------------------------------------

function Player.CmdCreatePlayer()
    -- body
    local createPlayer = {}
    this.SendProtocol("CreatePlayer",createPlayer)
end


function Player.CmdLogin(name,passWord)
    -- body
    print(type(name))
    print(name)
    local login = {
        account = {
            username = name,--""
            --password = passWord,--""
        },
    }
    this.SendProtocol("Login",login)
end

function Player.CmdEnterGame(id)
    -- body
    local enterGame = {
        player_id = id,
    }
    this.SendProtocol("EnterGame",enterGame)
end

function Player.CmdCreateRoom(room_model,room_extend_type,room_top_mutiple,room_open_rands)
    -- body
    local createRoom ={
        room = {
            options = {
                model = room_model,
                extend_type = room_extend_type,
                top_mutiple = room_top_mutiple,
                open_rands = room_open_rands,
            },
            --room_id = roomId,--1,
            --room_name = name,--"123",
            --enter_password  = passWord,--"123",
        },
    }
    this.SendProtocol("CreateRoom",createRoom)
end

function Player.CmdEnterRoom(id,passWord)
    -- body
    local enterRoom = {
        room = {
            room_id = id,--2;
            --enter_password = passWord,--"123";
        },
        
    }
    this.SendProtocol("EnterRoom",enterRoom)
end

function Player.CmdGameOperation()
    -- body
    local gameOperation = {
       oper_type = "GAME_OPER_TYPE_START"
    }
    this.SendProtocol("GameOperation",gameOperation)
end

function Player.CmdPaiOperation(paiOperType,paiChiTable,paiDaTable)
    -- body
    local paiOperation = {
        oper_type = paiOperType,
        pais = paiChiTable,
        pai = paiDaTable,
    }
    this.SendProtocol("PaiOperation",paiOperation)
end

---------------------------------------------------------------------------
--进入场景
---------------------------------------------------------------------------
function Player.CmdLoadScene(loadType,sceneId)
    local loadScene = {
        load_type = loadType,
        scene_id = sceneId,
    }
    this.SendProtocol("LoadScene",loadScene)
end
---------------------------------------------------------------------------
--发送协议
---------------------------------------------------------------------------
---[[
function Player.SendProtocol(messageName,message)
    Network.SendProtocol(messageName,message)
end
---------------------------------------------------------------------------
--进入游戏
---------------------------------------------------------------------------
--[[
function Player.CmdEnterGame(player_id)
    local enter_game = P_Protocol.EnterGame()
    enter_game.player_id = player_id
    -------------------------------------------
    this.SendProtocol(enter_game)
end
--]]
--]]

--[[
    协议处理：
    
    1.在Network中注册接收协议对应的响应函数；
    
    2.在本文件中实现响应函数；
--]]
---------------------------------------------
--------------type_t!!!!!!!!!!!!
---------------------------------------------
--

function Player.OnGameCalculate(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.GameCalculate",stuff)
    Player._calculate_data = message
    Player.ThreadFunction(ClickEvent.ShowCalculate)
end

function Player.OnSyncCommonReward(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.SyncCommonReward",stuff)
end

function Player.OnRoomInformation(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.RoomInformation",stuff)
    if message.player_list then
        Player._all_players_data = message.player_list
        if not Player._my_player_data then
            for k,v in pairs(Player._all_players_data) do
                if v.common_prop.player_id == this._id then
                    Player._my_player_data = v
                    Player.ThreadFunction(Player.MahJong.UpdateMyDataState)
                end
            end
        end
        if Player._my_player_data then
            Player.ThreadFunction(ClickEvent.RoomInformationUpdate)
        end
    else
        print("list null")
    end
end

function Player.OnPlayerInformation(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.PlayerInformation",stuff)
    if not message.player then
        return
    end
    if not Player._player_data then
        Player._player_data = message.player
        Player.ThreadFunction(ClickEvent.ThreadToMainMenu)
    else
        Player._player_data = message.player
    end
end

function Player.OnEnterRoom(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.EnterRoom",stuff)
    if message.error_code == "ERROR_SUCCESS" then
        --CS.LuaBehaviour._room_id = tostring(this._roomId)
        Player.ThreadFunction(Player.LoadScene)
    elseif message.error_code == "ERROR_ROOM_NOT_FOUNT" then
        print("no found")
    elseif message.error_code == "ERROR_ROOM_IS_FULL" then
        print("is full")
    end
end

function Player.OnPlayerList(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.PlayerList",stuff)
    print("---------")
    if message.player_list then
        Player._id = message.player_list[1]
    end
    --Player.ThreadFunction(ClickEvent.CreateNewPanel,ClickEvent.panelTable._choose_ui)
    --Player.CmdEnterGame(12)
end

function Player.OnPaiOperationAlert(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.PaiOperationAlert",stuff)

    if not message.pais then
        print("pais data is nil")
        return
    end

    --[[
    if not message.pai then
        if not message.pais then
            print("pais is nil")
            return
        end
        Player._pais_operation_alert_cache = message.pais
    else
        Player._pai_operation_alert_cache = message.pai
    end
    --]]
    Player._operation_alert_cache = message
    Player.ThreadFunction(ClickEvent.PaiOperationState)
end

function Player.OnPaiNotify(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.PaiNotify",stuff)
    if not message.data_type then
        print("type is nil")
        return
    end
    print(message.data_type)
    if message.data_type == "CARDS_DATA_TYPE_START" then
        --[[
        Player._invoke_table_test = message
        Player.ThreadFunction(Player.MahJong.CreatePlayerPaiTest)
        --]]
        Player._invoke_table = message

        local countPai = 0
        for k,v in pairs(Player._invoke_table.pais) do
            for j,m in pairs(v.cards) do
                countPai = countPai + 1
            end
        end
        
        print("countPai----------------")
        print(countPai)
        if countPai == 14 then
            Player.MahJong.SetCurrentState(operationState.DAPAI)
        end
        Player.ThreadFunction(Player.MahJong.CreatePlayerPai)
    elseif message.data_type == "CARDS_DATA_TYPE_FAPAI" then
        Player.MahJong.SetCurrentState(operationState.DAPAI)
        Player._fa_pai_cache = message.pai
        Player.ThreadFunction(Player.MahJong.ZhuaPai)
    elseif message.data_type == "CARDS_DATA_TYPE_SYNC" then
        Player._invoke_table_test = message
        Player.ThreadFunction(Player.MahJong.CreatePlayerPaiTest)
    end
    --[[
    for k, v in pairs(message.pais) do
        print(v.card_type)
        for i, m in pairs(v.cards) do
            print(m)
        end
    end
    ]]
end
--操作
function Player.OnPaiOperation(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.PaiOperation",stuff)

    if not message.oper_type then
        print("type is nil")
        return
    end
    print(message.oper_type)
    --Player._pai_operation_alert_cache = message.pai

    if message.oper_type == "PAI_OPER_TYPE_DAPAI" then
        Player.SetDaPaiCache(message)
        Player.ThreadFunction(Player.MahJong.DaPaiPoolShow)
    elseif message.oper_type == "PAI_OPER_TYPE_HUPAI" then
        Player.SetPaiOperationShowCache(message)
        Player.ThreadFunction(Player.MahJong.OperationPaiShow)
    elseif message.oper_type == "PAI_OPER_TYPE_GANGPAI" then
        Player.SetPaiOperationShowCache(message)
        Player.ThreadFunction(Player.MahJong.OperationPaiShow)
    elseif message.oper_type == "PAI_OPER_TYPE_PENGPAI" then
        Player.SetPaiOperationShowCache(message)
        Player.ThreadFunction(Player.MahJong.OperationPaiShow)
    elseif message.oper_type == "PAI_OPER_TYPE_CHIPAI" then
        Player.SetPaiOperationShowCache(message)
        Player.ThreadFunction(Player.MahJong.OperationPaiShow)
    elseif message.oper_type == "PAI_OPER_TYPE_GIVEUP" then
        print("give up operation")
    elseif message.oper_type == "PAI_OPER_TYPE_XUANFENG_FENG" then
        Player.SetPaiOperationShowCache(message)
        Player.ThreadFunction(Player.MahJong.OperationPaiShow)
    elseif message.oper_type == "PAI_OPER_TYPE_XUANFENG_JIAN" then
        Player.SetPaiOperationShowCache(message)
        Player.ThreadFunction(Player.MahJong.OperationPaiShow)
    elseif message.oper_type == "PAI_OPER_TYPE_ANGANGPAI" then
        Player.SetPaiOperationShowCache(message)
        Player.ThreadFunction(Player.MahJong.OperationPaiShow)
    else
        return
    end


    --[[
    switch = {
        ["PAI_OPER_TYPE_DAPAI"] = function( ... )
            -- body
            --message.position
            Player.SetDaPaiCache(message)
            Player.ThreadFunction(Player.MahJong.DaPaiPoolShow)
        end,
        ["PAI_OPER_TYPE_HUPAI"] = function( ... )
            -- body
        end,
        ["PAI_OPER_TYPE_GANGPAI"] = function( ... )
            -- body
            Player.SetPaiOperationShowCache(message)
            Player.ThreadFunction(Player.MahJong.OperationPaiShow)
        end,
        ["PAI_OPER_TYPE_PENGPAI"] = function( ... )
            -- body
            Player.SetPaiOperationShowCache(message)
            Player.ThreadFunction(Player.MahJong.OperationPaiShow)
        end,
        ["PAI_OPER_TYPE_CHIPAI"] = function( ... )
            -- body
            Player.SetPaiOperationShowCache(message)
            Player.ThreadFunction(Player.MahJong.OperationPaiShow)
        end,
        ["PAI_OPER_TYPE_GIVEUP"] = function ( ... )
            -- body
        end,
    }
    local result = switch[message.oper_type]
    result()
    --]]
end

function Player.OnGameOperation(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.GameOperation", stuff)
    if not message.source_player_id then
        return
    end
    print(message.source_player_id)
    print(this._id)
    if message.source_player_id then
        --判断id是谁
        if message.source_player_id == this._id then
            --变化按钮
        else
            print(message.source_player_id)
        end
    end
end

function Player.OnCreatePlayer(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.CreatePlayer", stuff)

    this._id = message.player_id
    print(this._id)
end

function Player.OnCreateRoom(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.CreateRoom", stuff)
    this._roomId = message.room.room_id
    Player.ThreadFunction(Player.LoadScene)
    --this._roomType = message.room.room_type
end

function Player.OnAlterError(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.AlterError", stuff)
    this.error_type = message.error_type
    this.error_show_type = message.error_show_type
    this.error_code = message.error_code
    print(this.error_type)
    --Player.ThreadFunction(Player.LoadScene)
end

function Player.OnLoadSuccess()
    this.CmdEnterScene()
end

---------------------------------------------------------------------------
--错误码提示
---------------------------------------------------------------------------
function Player.OnAlertMessage(type_t,stuff)
    -- body
    if not stuff then
        return
    end
    local message = protobuf.decode("Adoter.Asset.AlertMessage", stuff)
    print(message.error_type)
    print(message.error_show_type)
    print(message.error_code)
end
---------------------------------------------------------------------------
--通用操作返回协议，模拟RPC处理流程
---------------------------------------------------------------------------
function Player.OnCommonOperation(type_t,stuff)
    if not stuff then
        return
    end
	local message = protobuf.decode("Adoter.Asset.CommonOperationResponse", stuff)
    FLibEvent.Fire(message.client_type_t, message.client_message)
end
---------------------------------------------------------------------------
--周围物体、玩家移动
---------------------------------------------------------------------------
function Player.OnSurroundChanged(stuff)
    logWarn('OnSurroundChanged...');
    local surrouds = P_Protocol.SurroundingsChanged()
    surrouds:ParseFromString(stuff)
    
    local entity_id = surrouds.entity_id
    logWarn(entity_id)
end
---------------------------------------------------------------------------
-----线程调用
---------------------------------------------------------------------------
function Player.ThreadFunction(invokeFunction)
    -- body
    --[[
    if Player.self then
        Player.self:Attach(invokeFunction)
    else
        print("no init Player.self")
    end
    --]]
    if Player.self then
        Player.SetinvokeFunctionCache(invokeFunction)
    else
        print("no init Player.self")
    end
end
return Player