local TouchCT = require "TouchCT"
--[[
local AssetManager = require "AssetManager"
	local loader = AssetManager.Load()
	print(loader)
	hoster = AssetManager.Get(196610)
	print(hoster)
	AssetManager.PrintMessage(hoster)
--]]
MahJong = {}
local _mj_asset = {}
local newVector3 = CS.UnityEngine.Vector3
local _diceObj
local _gaiObj
local _pointFather = {}
local _modelSize = {length = 0.0171,width = 0.02566,height = 0.036}
local _modelPool = {}
local _modelPoolLineCount = 36
local _startPosition = {}
local _startRotation = {}
local _myAnimation
local _animationName = {
	stepDown = "GaiDown",
	stepMiddle = "GaiPushMiddle",
	stepUp = "GaiUp",
}
local _animationState = ""
function start()
	-- body
	MahJong.init()
	---[[
	MahJong.animationPlay()
	MahJong.modelPoolInit()
	MahJong.mjLoader()
	--]]
end

function MahJong.mjLoader()
	-- body
	local AssetManager = require "AssetManager"
	--local _mj_asset = AssetManager.GetMessagesByType(6)
	local data = AssetManager.Get(393236)
	print(data)
	AssetManager.PrintMessage(data)
	--for k,v in pairs(data) do
	--	print(v)
	--end
end

function MahJong.init()
	-- body
	_diceObj = self.transform:Find("Dice").gameObject
	_gaiObj = self.transform:Find("Gai").gameObject
	_pointFather.D = _gaiObj.transform:Find("Point_D/Father").gameObject
	_startPosition.D = newVector3(_modelSize.width/2 - _modelPoolLineCount*_modelSize.width/4,_modelSize.length/2,0)
	_startRotation.D = newVector3.zero
	_pointFather.N = _gaiObj.transform:Find("Point_N/Father").gameObject
	_startPosition.N = newVector3(0,_modelSize.length/2,_modelSize.width/2 - _modelPoolLineCount*_modelSize.width/4)
	_startRotation.N = newVector3(0,-90,0)
	_pointFather.X = _gaiObj.transform:Find("Point_X/Father").gameObject
	_startPosition.X = newVector3(-_modelSize.width/2 + _modelPoolLineCount*_modelSize.width/4,_modelSize.length/2,0)
	_startRotation.X = newVector3(0,90,0)
	_pointFather.B = _gaiObj.transform:Find("Point_B/Father").gameObject
	_startPosition.B = newVector3(0,_modelSize.length/2,-_modelSize.width/2 + _modelPoolLineCount*_modelSize.width/4)
	_startRotation.B = newVector3(0,180,0)
	_myAnimation = self:GetComponent("Animation")
	self:GetComponent("AnimationRegister").animationEvent = MahJong.animationPlay
end

function MahJong.modelPoolInit()
	-- body
	local modelTemp = CS.UnityEngine.Resources.Load("MJModel/baiban_Model")
	local countTemp = 0
	for i=1,_modelPoolLineCount*4 do
		if i <= _modelPoolLineCount then
			_modelPool[i] = CS.UnityEngine.Object.Instantiate(modelTemp,_pointFather.D.transform)
			_modelPool[i].transform.localEulerAngles = _startRotation.D
			_modelPool[i].transform.localPosition = 
			_startPosition.D + 
			((i-1)%2)*newVector3(0,_modelSize.length,0) + 
			math.modf((i-1)/2)*newVector3(_modelSize.width,0,0)
		elseif i > _modelPoolLineCount and i <= _modelPoolLineCount*2 then
			_modelPool[i] = CS.UnityEngine.Object.Instantiate(modelTemp,_pointFather.N.transform)
			_modelPool[i].transform.localEulerAngles = _startRotation.N
			_modelPool[i].transform.localPosition = 
			_startPosition.N + 
			((i-_modelPoolLineCount)%2)*newVector3(0,_modelSize.length,0) + 
			math.modf((i-_modelPoolLineCount-1)/2)*newVector3(0,0,_modelSize.width)
		elseif i > _modelPoolLineCount*2 and i <= _modelPoolLineCount*3 then
			_modelPool[i] = CS.UnityEngine.Object.Instantiate(modelTemp,_pointFather.X.transform)
			_modelPool[i].transform.localEulerAngles = _startRotation.X
			_modelPool[i].transform.localPosition = 
			_startPosition.X + 
			((i-_modelPoolLineCount*2)%2)*newVector3(0,_modelSize.length,0) + 
			math.modf((i-_modelPoolLineCount*2-1)/2)*newVector3(-_modelSize.width,0,0)
		elseif i > _modelPoolLineCount*3 and i <= _modelPoolLineCount*4 then
			_modelPool[i] = CS.UnityEngine.Object.Instantiate(modelTemp,_pointFather.B.transform)
			_modelPool[i].transform.localEulerAngles = _startRotation.B
			_modelPool[i].transform.localPosition = 
			_startPosition.B + 
			((i-_modelPoolLineCount*3)%2)*newVector3(0,_modelSize.length,0) + 
			math.modf((i-_modelPoolLineCount*3-1)/2)*newVector3(0,0,-_modelSize.width)
		end

	end
	MahJong.modelPoolSetActive(false)
	--print(i)
end

function MahJong.modelPoolSetActive(bool)
	-- body
	for k, v in pairs(_pointFather) do  
    	v:SetActive(bool)
	end
end

function MahJong.animationPlay()
	-- body
	switch = {
		[_animationName.stepDown] = function( ... )
			-- body
			MahJong.modelPoolSetActive(true)
			_myAnimation:Play(_animationName.stepMiddle)
			_animationState = _animationName.stepMiddle
		end,
		[_animationName.stepMiddle] = function( ... )
			-- body
			_myAnimation:Play(_animationName.stepUp)
			_animationState = _animationName.stepUp
		end,
		[_animationName.stepUp] = function( ... )
			-- body
			_animationState = ""
			print("startGame")
		end,
	}
	local fSwitch = switch[_animationState]

	if fSwitch then
		local result = fSwitch()
	else
		_myAnimation:Play("GaiDown")
		_animationState = _animationName.stepDown
		--print("key no found")
	end
end

local _rotate_speed = 2000
function update()
	-- body
	--local speed = CS.UnityEngine.Vector3.up * CS.UnityEngine.Time.deltaTime * _rotate_speed
	--_dice_obj.transform:Rotate(speed)
end
return MahJong